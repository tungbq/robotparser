import sys
import getopt
import json
import datetime
import re
import time
import xmltodict
from collections import OrderedDict

TEST_SUITES = []

def populate_detail(test):
    detail = OrderedDict()

    detail['name'] = test['@name']
    detail['tag'] = test.get('tags', {}).get('tag', test.get('tag', ''))
    detail['status'] = test['status']['@status']

    start_time_key = '@starttime' if '@starttime' in test['status'] else '@start'
    detail['start_time'] = test['status'][start_time_key]

    if '@starttime' in test['status']:
        detail['end_time'] = test['status']['@endtime']
        detail['elapsed_time'] = get_elapsed_time(
            test['status']['@starttime'], test['status']['@endtime']
        )
    else:
        detail['elapsed_time'] = test['status']['@elapsed']

    detail['message'] = test['status'].get('#text', '')
    return detail

def parse_test(tests):
    return [populate_detail(test) for test in tests] if isinstance(tests, list) else [populate_detail(tests)]

def get_test_cases(suites):
    data = {'details': [detail for suite in suites for detail in parse_test(suite['test'])]}
    return data

def get_elapsed_time(start_time, end_time):
    start = time.mktime(datetime.datetime.strptime(start_time, "%Y%m%d %H:%M:%S.%f").timetuple())
    end = time.mktime(datetime.datetime.strptime(end_time, "%Y%m%d %H:%M:%S.%f").timetuple())
    elapsed_time = time.strftime('%H:%M:%S', time.gmtime(end - start))
    return elapsed_time

def get_total_stat(total_stats):
    total_stat = next((stat for stat in total_stats if stat['#text'] == 'All Tests'), total_stats)
    return total_stat

def get_test_suites(suite):
    if 'test' in suite:
        TEST_SUITES.append(suite)
        return
    elif isinstance(suite, list):
        for sub_suite in suite:
            get_test_suites(sub_suite)
    else:
        get_test_suites(suite['suite'])

def parse_xml_file(input_xml_file):
    with open(input_xml_file, "r") as xml_file:
        xml_input = xml_file.read().replace('\n', '')
        all_data = xmltodict.parse(xml_input)['robot']
        get_test_suites(all_data['suite'])
        test_cases = get_test_cases(TEST_SUITES)
        result = OrderedDict()

        total_stat = get_total_stat(all_data['statistics']['total']['stat'])
        total_pass, total_fail, total_skip = int(total_stat['@pass']), int(total_stat['@fail']), int(total_stat.get('@skip', 0))

        result.update(total=total_pass + total_fail + total_skip, pass_=total_pass, fail=total_fail, skip=total_skip)
        result['elapsed_time'] = 'N/A' if all_data['suite']['status']['@starttime'] == 'N/A' or all_data['suite']['status']['@endtime'] == 'N/A' else get_elapsed_time(
            all_data['suite']['status']['@starttime'], all_data['suite']['status']['@endtime']
        )
        result['test_case_stats'] = test_cases['details']

    return result

def write_json_to_file(data, output_file):
    with open(output_file, "w") as json_file:
        json.dump(data, json_file, indent=4)

def usage():
    print("""Usage: python parse-robot-output.py -i <input-xml-file> -o <output-json-file>
Options:
  -i, --input-file    Specify the input XML file generated by robot test (e.g., robot-result/output.xml)
  -o, --output-file   Specify the output JSON file (e.g., output/output.json)
  -h, --help          Display this help message

Example:
  python parse-robot-output.py -i robot-result/output.xml -o output/output.json

Note:
  Make sure to provide valid file paths.
""")
    sys.exit(2)

def check_input_parameters(argv):
    input_file, output_file = '', ''

    try:
        opts, args = getopt.getopt(argv, 'i:o:h:', ['input-file=', 'output-file=', 'help'])
    except getopt.GetoptError:
        usage()

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ("-i", "--input-file"):
            input_file = arg
        elif opt in ("-o", "--output-file"):
            output_file = arg
        else:
            usage()

    if not input_file:
        print('Missing input file, please check!')
        usage()

    if not output_file:
        print('Missing output file, please check!')
        usage()

    print('Input file is: ', input_file)
    print('Output file is: ', output_file)

    return input_file, output_file

def main(argv):
    print('Checking input parameters ...')
    input_file, output_file = check_input_parameters(argv)

    print('Parsing xml file ...')
    data = parse_xml_file(input_file)

    print(f'Saving json data to output file: {output_file} ...')
    write_json_to_file(data, output_file)

if __name__ == "__main__":
    main(sys.argv[1:])
